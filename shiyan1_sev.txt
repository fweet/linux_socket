#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#define PORT 8888						/*侦听端口地址*/
#define BACKLOG 2						/*侦听队列长度*/
#define MAXBUF 1024
int main(int argc, char *argv[])
{
	int len;
	char buf[MAXBUF];
	int ss,sc;		/*ss为服务器的socket描述符，sc为客户端的socket描述符*/
	struct sockaddr_in server_addr;	/*服务器地址结构*/
	struct sockaddr_in client_addr;	/*客户端地址结构*/
	int err;							/*返回值*/
	pid_t pid;							/*分叉的进行ID*/

	/*建立一个流式套接字*/
	ss = socket(AF_INET, SOCK_STREAM, 0);
	if(ss < 0){							/*出错*/
		printf("socket error\n");
		return -1;	
	}
	
	/*设置服务器地址*/
	bzero(&server_addr, sizeof(server_addr));			/*清零*/
	server_addr.sin_family = AF_INET;					/*协议族*/
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);	/*本地地址*/
	server_addr.sin_port = htons(PORT);				/*服务器端口*/
	
	/*绑定地址结构到套接字描述符*/
	err = bind(ss, (struct sockaddr*)&server_addr, sizeof(server_addr));
	if(err < 0){/*出错*/
		printf("bind error\n");
		return -1;	
	}
	
	/*设置侦听*/
	err = listen(ss, BACKLOG);
	if(err < 0){										/*出错*/
		printf("listen error\n");
		return -1;	
	}
		socklen_t addrlen = sizeof(struct sockaddr);
		sc = accept(ss, (struct sockaddr*)&client_addr, &addrlen); 
		pid = fork();						/*分叉进程*/
		if( pid == 0 )
			{						/*子进程中*/
			while (1)   
            {  
                bzero(buf, MAXBUF + 1);  
                printf("input the message to send:");  
                fgets(buf, MAXBUF, stdin);  
                if (!strncasecmp(buf, "quit", 4))   
                {  
                    printf("i will close the connect!\n");  
                    break;  
                }  
                len = send(sc, buf, strlen(buf) - 1, 0);  
                if (len < 0)  
                 {  
                    printf("message'%s' send failure!errno code is %d,errno message is '%s'\n",  
                    buf, errno, strerror(errno));  
                    break;  
                }  
            }  
        }  
        else   
        {     
            while(1)  
            {  
                bzero(buf, MAXBUF + 1);  
                len = recv(sc, buf, MAXBUF, 0);  
                if (len > 0)  
                    printf("message recv successful :'%s',%dByte recv\n",buf, len);  
                else if (len < 0)  
                {  
                    printf("recv failure!errno code is %d,errno message is '%s'\n",  
                    errno, strerror(errno));  
                    break;  
                }  
                else  
                {  
                    printf("the other one close quit\n");  
                    break;  
                }  
            }  
        }  
				close(sc);  
        close(ss);  
            return 0;  
		}